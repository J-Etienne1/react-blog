Full Modern React Tutorial by Net Ninja
https://www.youtube.com/playlist?list=PL4cUxeGkcC9gZD-Tvwfod2gaISzfRiP9d
https://github.com/iamshaunjp/Complete-React-Tutorial


===================================================================================

npx create-react-app dojo-blog
this line creates the react app 

===================================================================================

when uploading react projects to GitHub, the node_modules folder isnt uploaded as it is so large, so if you dowload a react git repo, after you download it cd into the project and enter 
npm install
this will look in the package.json file for all the project dependncises and install them and create the node_module folder

===================================================================================

Your diff compnents like nave bar, article, side bar etc are created in the src folder as individual files such as App.js
they are then linked to index.js like <App /> which will then render them so could vabe <Nav /> for a Nav componemt we add to a package
Also need to remever to import our new components into the index.js file eg import App from './App';
The functions you create for your components need to start with a capital letter eg fuction App in the app.js file


===================================================================================

Arrow Function shortcut:
rafce creates an arrow fuction shortcut:  side note, dont need import anymore
import React from 'react'
const Header = () => {
  return (
    <div>Header</div>
  )
}
export default Header 

===================================================================================
Examples for waht can/cant be rendered  in App.js
function App() {
  const title = "Welcome to the new blog";
  const likes = 50;
  //object cant be converted to a string to be outputted to the browser so this will result in an error
  // const person = {name: 'Jason', age: 38}
  const link = "https://www.google.com"

  return (
    <div className="App">
      <div className="content">
        <h1> {title} </h1>
        <p>Liked {likes} times</p>
        {/*<p> {person} </p>*/}

        <p>{10}</p>
        <p>{"Hello People"}</p>
        <p>{[1, 2, 3, 4, 5, 6, 7]}</p>
        <p>{Math.random() * 10}</p>
        
        <a href={link}>Google</a>
      </div>
    </div>
  );
}

export default App;


===================================================================================

Exampe of inline styling
<a
          href="/create"
          style={{
            color: "white",
            backgroundColor: "#f1356d",
            borderRadius: "8px",
          }}
        >



===================================================================================

Example of a function and how to use events

import React from "react";

const Home = () => {
  const handleClick = () => {
    console.log("Hello there");
  };

  return (
    <div className="home">
      <h2>Homepage</h2>
      <button onClick={handleClick}>Click me</button>
    </div>
  );
};

export default Home;



if we use 
<button onClick={handleClick()}>Click me</button>
the function will be invokled automatically which may be not what we want like i this className

if we have a function that we want to give arguments to using () isnt an option so in this case we wrap our function inside an anonomys function

const handleClickAgain = (name) => {
    console.log('hello ' + name)

  }


<button onClick={() => {handleClickAgain("Jason");}}>  Click me again </button>

===================================================================================

UseState Example

import { useState } from "react";

const Home = () => {
  //let name = "Jason";
  const [name, setName] = useState('Jason')
  const [age, setAge] = useState(38)

  const handleClick = () => {
    setName('Nosaj')
    setAge(56)
  };

  return (
    <div className="home">
      <h2>Homepage</h2>
      <p>{ name } is { age } years old</p>
      <button onClick={handleClick}>Click me</button>
    </div>
  );
};

export default Home;


===================================================================================

to set up a fake rest api with JSON server, enter the foloowing in the console, after adding our JSON data
npx json-server --watch data/db.json --port 8000


needs to be restarted with the above commmand each time reat is loaded up



===================================================================================

HANDLE DELETE:


Home.js
 const handleDelete = (id) => {
    const newBlogs = blogs.filter((blog) => blog.id !== id);
    setBlogs(newBlogs);
  };




{blogs && <BlogList blogs={blogs} title="All Blogs!" handleDelete={handleDelete} />}




BlogList.js
const BlogList = ({ blogs, title, handleDelete }) => {
  // const blogs = props.blogs
  // const title = props.title

  return (
    <div className="blog-list">
      <h2>{title}</h2>
      {blogs.map((blog) => (
        <div className="blog-preview" key={blog.id}>
          <h2>{blog.title}</h2>
          <p>Written by {blog.author}</p>
          <button onClick={()=> handleDelete(blog.id)}>Delete Blog</button>
        </div>
      ))}
    </div>
  );
};




==================================================================================

Home.js

.catch((err) => {
        console.log(err.message);
      });

use Ctrl C to stop the JSON server then reload the page and in the console we will see the connection error displayed

GET http://localhost:8000/blogs net::ERR_CONNECTION_REFUSED

Failed to fetch


to check if we can connect but the we do not get any data back (endpoint is fault or doesnt exist) we add an IF check


==================================================================================

























